  function [x0n, rn, d, sigmah, conv, Vx0n, urn, GNlog, a, R] = ... 
           lssphere(X, x0, r, tolp, tolg, w)
% ---------------------------------------------------------------------
% LSSPHERE.M     Least-squares sphere using Gauss-Newton.
%
% Version 2.2    
% Last amended   I M Smith 07 Mar 2002. 
%                Statistics and option of weights added. 
% Version 2.1       Last amended 22 April 1995.
% Author            A B Forbes, DITC, NPL: Crown Copyright.
% ---------------------------------------------------------------------
% Input    
% X        Array [x y z] where x = vector of x-coordinates, 
%          y = vector of y-coordinates and z = vector of z-coordinates. 
%          Dimension: m x 3. 
% 
% x0       Estimate of the sphere centre. 
%          Dimension: 3 x 1. 
%
% r        Estimate of the sphere radius. 
%          Dimension: 1 x 1. 
% 
% tolp     Tolerance for test on step length. 
%          Dimension: 1 x 1. 
%
% tolg     Tolerance for test on gradient.
%          Dimension: 1 x 1. 
% 
% <Optional...  
% w        Weights. 
%          Dimension: m x 1. 
% ...>
% 
% Output  
% x0n      Estimate of the sphere centre. 
%          Dimension: 3 x 1. 
% 
% rn       Estimate of the sphere radius. 
%          Dimension: 1 x 1. 
% 
% d        Vector of radial distances from the points
%          to the sphere. 
%          Dimension: m x 1. 
% 
% sigmah   Estimate of the standard deviation of the weighted 
%          residual errors. 
%          Dimension: 1 x 1. 
% 
% conv     If conv = 1 the algorithm has converged, 
%          if conv = 0 the algorithm has not converged
%          and x0n, rn, d, and sigmah are current estimates. 
%          Dimension: 1 x 1. 
% 
% Vx0n     Covariance matrix of sphere centre. 
%          Dimension: 3 x 3. 
%
% urn      Uncertainty in sphere radius. 
%          Dimension: 1 x 1. 
% 
% GNlog    Log of the Gauss-Newton iterations. 
%          Rows 1 to niter contain 
%          [iter, norm(f_iter), |step_iter|, |gradient_iter|]. 
%          Row (niter + 1) contains 
%          [conv, norm(d), 0, 0]. 
%          Dimension: (niter + 1) x 4. 
% 
% a        Optimisation parameters at the solution.
%          Dimension: 4 x 1. 
%             
% R        Upper-triangular factor of the Jacobian matrix
%          at the solution. 
%          Dimension: 4 x 4. 
%
% Modular structure: NLSS11.M, FGSPHERE.M 
%
% [x0n, rn, d, sigmah, conv, Vx0n, urn, GNlog, a, R] = ... 
%   lssphere(X, x0, r, tolp, tolg <, w >)
% ---------------------------------------------------------------------
